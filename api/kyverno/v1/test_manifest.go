package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Test_manifest struct {
	metav1.TypeMeta `json:",omitempty" yaml:",omitempty"`
	Metadata        Metadata `json:",omitempty" yaml:",omitempty"`
	Spec            Specn    `json:"spec,omitempty" yaml:"spec,omitempty"`
}

type Metadata struct {
	Name        string            `json:",omitempty" yaml:",omitempty"`
	Labels      map[string]string `json:",omitempty" yaml:",omitempty"`
	Annotations map[string]string `json:",omitempty" yaml:",omitempty"`
}

type Specn struct {
	Policies  []string  `json:"policies" yaml:"policies,omitempty"`
	Resources resources `json:"resources,omitempty" yaml:"resources,omitempty"`
	Results   []Results `json:"results,omitempty" yaml:"name,omitempty"`
	Variables Variables `json:"variables,omitempty" yaml:"variables,omitempty"`
}

type resources struct {
	My_resource_pool []string `json:"my_resource_pool,omitempty" yaml:"my_resource_pool,omitempty"`
}

type Results struct {
	Policy string `json:"policy,omitempty" yaml:"policy,omitempty"`
	Rule   string `json:"rule,omitempty" yaml:"rule,omitempty"`
	//Resource  string      `json:"resource,omitempty" yaml:"resource,omitempty"`
	Resources []Resources `json:"resources,omitempty" yaml:"resources,omitempty"`
	Namespace string      `json:"namespace,omitempty" yaml:"namespace,omitempty"`
	Kind      string      `json:"kind,omitempty" yaml:"kind,omitempty"`
	Result    string      `json:"result,omitempty" yaml:"result,omitempty"`
	//PatchedResource string   `json:"patchedResource"`
	// AutoGeneratedRule is internally set by the CLI command. It takes values either
	// autogen or autogen-cronjob.
	AutoGeneratedRule string `json:"auto_generated_rule"`
	// GeneratedResource takes a resource configuration file in yaml format from
	// the user to compare it against the Kyverno generated resource configuration.
	// GeneratedResource string `json:"generatedResource"`
	// // CloneSourceResource takes the resource configuration file in yaml format
	// // from the user which is meant to be cloned by the generate rule.
	// CloneSourceResource string `json:"cloneSourceResource"`
}

type Resources struct {
	//Object      string `json:"object,omitempty" yaml:"object,omitempty"`
	Old         string `json:"old,omitempty" yaml:"old,omitempty"`
	Patched     string `json:"patched,omitempty" yaml:"patched,omitempty"`
	CloneSource string `json:"cloneSource,omitempty" yaml:"cloneSource,omitempty"`
	Generated   string `json:"generated,omitempty" yaml:"generated,omitempty"`
}

type Variables struct {
	Global   map[string]string `json:"global,omitempty" yaml:"global,omitempty"`
	Policies []Policies        `json:"policies,omitempty" yaml:"policies,omitempty"`
}

type Policies struct {
	Name      string      `json:"name,omitempty" yaml:"name,omitempty"`
	Rules     []Rulev     `json:"rules,omitempty" yaml:"rules,omitempty"`
	Resources []Resourcev `json:"resources,omitempty" yaml:"resources,omitempty"`
}

type Rulev struct {
	Name              string                 `json:"name,omitempty" yaml:"name,omitempty"`
	Values            map[string]interface{} `json:"values,omitempty" yaml:"values,omitempty"`
	NamespaceSelector []NamespaceSelector    `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty"`
	Attestations      []attestations         `json:"attestations,omitempty" yaml:"attestations,omitempty"`
}

type NamespaceSelector struct {
	Name   string            `json:"name,omitempty" yaml:"name,omitempty"`
	Labels map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`
}

type attestations struct {
	PredicateType     string `json:"predicateType,omitempty" yaml:"predicateType,omitempty"`
	PredicateResource string `json:"predicateResource,omitempty" yaml:"predicateResource,omitempty"`
}

type Resourcev struct {
	Name     string                 `json:"name,omitempty" yaml:"name,omitempty"`
	Values   map[string]interface{} `json:"values,omitempty" yaml:"values,omitempty"`
	UserInfo UserInfo               `json:"userInfo,omitempty" yaml:"userInfo,omitempty"`
}
